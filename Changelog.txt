Feb 10, 2018:
	Memory access checks range and will not cause exception now.

Feb 9, 2018:
	Now panel has a pause button.
	Now only loads when paused.
	Loads good stuff!

Feb 8, 2018:
	Front panel tick. A full cycle per click.
	Load PC from front panel.
	Added a button ui.
	Load MAR and memory.
	Front panel now showing MAR.
	Front panel now shows what you selected.
	And gate.

Feb 7, 2018:
	Added a radio switch class for panel interacting.
	Added a pause bit in CU.
	Added some logic gates, OR.
	Split Panel to different files.
	Added a reset bit to reset CU status.

Feb 6, 2018:
	Added a switch for panel operating.
	Added a bulb indicator for panel interacting.
	Added a set for switches and a set for bulbs.
	Added an auto tick button on panel.
	Added a load program to memory panel.

Feb 4, 2018:
	Split cable adapter. Now they are more flexible - one will erase all other bits while one won't.
	Indirect access support.
	States format update. Please refer to controlDefFormat.ini for more details.

Feb 2, 2018:
	Rewrote main frame with javafx.
	Old panels are removed.
	Instead of outputing all memory cells to string, memory will output only assigned cells now.
	Added a visualization for control unit indicating its status.
	Added support for a grammar to indicate how to connect cable. Refer to chipsDefFormat.ini for more details.

Jan 31, 2018:
	Updated write to load to fit proper nouns.

Jan 30, 2018:
	Control unit is generated by a similar file as machine. Please refer to controlDef.ini
	Control unit has a more developed parser. It's a LA1 parser.
	As control unit is generated, it's tick and evaluate phase is changed too.
	Now we use String instead of an enum for state.
	Moved chip definition into the configuration file. Please refer to chipDef.ini
	Made a compiler for machine code.
	Now memory has a magic for storing a program into it.
	Rewrote machine parser so it's also a LA1 parser now. 

Jan 28, 2018:
	Added a chip factory for configuration file decoding.
	Decode chip in a state based way.
	Unified input and output as port. Now they share a same map.
	getPortWidth is now usable.
	Cables now can be decoded.

Jan 25, 2018:
	LDR can be recognized and executed.
	STR can be recognized and executed.
	LDA can be recognized and executed.
	LDX can be recognized and executed.
	STX can be recognized and executed.
	Cable adapter will overwrite other bits now.
	Register file now has its own toString.
	Added an adder chip class.
	PC updates when instruction execution is done.
	We have a general purpose register file and an index register file now.
	Added a not gate.
	Added some button showing GPRF and IRF.

Jan 24, 2018:
	Now all inputs and outputs are taken by method. More robust.
	Now we have a dummy cable. It's used when no cable is assigned to certain chip port.
	Fetch process is done. Added more connections.
	Now there is a button showing memory data.
	Added some basic testing instructions.
	On evaluate, cables and chips will return true when its value is changed.
	Added more monitors to window.
	Registers now give their value as string in a better way.
	Fliped wire value order.

Jan 23, 2018:
	Cable now is an abstract class. SingleCable is used for all previous cable.
	Added a cable adapter.
	Added a state based control unit. 

Jan 22, 2018:
	Added a gate.

Jan 21, 2018:
	Added a basic memory. Please refer to the Memory.txt for more information.
	Added a multiplexer.
	Added a demultiplexer.
	Added a register file.
	Cable now supports partial assign.
	Added an instruction decoder.

Jan 20, 2018:
	Now cable class is done. We can use cable to connect chips.
	Added a clock register class toString function to give readable output.
	Panel updates, have PC on it.
	Added a constant chip class. Its output is always a constant.
	PC is wired. 
	
Jan 19, 2018:
	Designed the basic skeleton of the project.
	Chips have tick and evaluate to simulate a full cycle.
	Each chip has input and output ports.
	Ports have a width definition table and a connection table.
	Machine includes chips and cables.
	Some of the cables can be anonymous.
	Used a window with a grid to show register and named cable values.
	Machine will tick all chips while tick and evaluate all chips while evaluate.
	You can tick the machine one step by one on the window frame.
	Added a class register chip class. It fetches the input to its latch when ticks.