{
	PC_load
	PC_output
	MAR_load
	MBR_input_sel
	memory_read
	memory_load
	MBR_output
	IR_load
	EA_Gate
	GPRF_load
	GPRF_output
	IRF_load
	IRF_only
}
{
	INITIALIZED				: FETCH_PC_TO_MAR
	FETCH_PC_TO_MAR			: FETCH_MEMORY_ACCESS
	FETCH_MEMORY_ACCESS		: FETCH_MBR_TO_IR
	FETCH_MBR_TO_IR			: DECODE
	DECODE 					: {
		0					: HALT						# HLT
		1					: EA_TO_MAR					# LDR
		65					: EA_TO_MAR					# LDR, Indirect.
		2					: EA_TO_MAR					# STR
		66					: EA_TO_MAR					# STR, Indirect.
		3					: EA_TO_REGISTER			# LDA
		33					: EA_TO_MAR					# LDX
		34					: EA_TO_MAR					# STX
	}
	EA_TO_MAR				: {
		1					: MEMORY_ACCESS				# LDR
		65					: PRE_MEMORY_ACCESS			# LDR, Indirect.
		2					: GPRF_TO_MBR				# STR
		66					: PRE_MEMORY_ACCESS			# STR, Indirect.
		33					: MEMORY_ACCESS				# LDX
		34					: IRF_TO_MBR				# STX
	}
	PRE_MEMORY_ACCESS		: {
		65					: MBR_TO_MAR				# LDR, Indirect.
		66					: MBR_TO_MAR				# STR, Indirect.
	}
	MEMORY_ACCESS			: {
		1					: MBR_TO_GRFS				# LDR
		65					: MBR_TO_GRFS				# LDR, Indirect.
		66					: UPDATE_PC					# STR, Indirect.
		2					: UPDATE_PC					# STR
		33					: MBR_TO_IRF				# LDX
		34					: UPDATE_PC					# STX
	}
	MBR_TO_MAR				: {
		65					: MEMORY_ACCESS
		66					: GPRF_TO_MBR
	}
	{
		GPRF_TO_MBR	
		IRF_TO_MBR				
	}						: MEMORY_WRITE
	UPDATE_PC				: FETCH_PC_TO_MAR
	{
		MBR_TO_GRFS
		EA_TO_REGISTER
		MBR_TO_IRF
		MEMORY_WRITE
	}						: UPDATE_PC
}
{
	FETCH_PC_TO_MAR 		: PC_output, MAR_load
	FETCH_MEMORY_ACCESS 	: memory_read
	FETCH_MBR_TO_IR			: MBR_output, IR_load
	EA_TO_MAR				: EA_Gate, MAR_load
	MEMORY_ACCESS	 		: memory_read
	PRE_MEMORY_ACCESS		: memory_read
	MEMORY_WRITE			: memory_load
	MBR_TO_MAR				: MBR_output, MAR_load
	MBR_TO_GRFS				: MBR_output, GPRF_load
	MBR_TO_IRF			 	: MBR_output, IRF_load
	EA_TO_REGISTER 			: EA_Gate, GPRF_load
	GPRF_TO_MBR			 	: memory_read, GPRF_output, MBR_input_sel
	IRF_TO_MBR				: memory_read, IRF_only, MBR_input_sel
	UPDATE_PC			 	: PC_load
}